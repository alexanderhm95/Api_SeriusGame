const TestTeacher = require("../models/testTeacher.model.js");
const Person = require("../models/person.model.js");
const Teacher = require("../models/teacher.model.js");
const Student = require("../models/student.model.js");
const Dece = require("../models/dece.model.js");
const Caso = require("../models/caso.model.js");
const User = require("../models/user.model.js");
const Institution = require("../models/institution.model.js");

exports.findAll = async (req, res) => {
  try {
    console.log(req.params);
    const { id } = req.params;

    // Realizar mÃºltiples consultas en paralelo para mejorar el rendimiento
    const [user, dece] = await Promise.all([
      User.findById(id),
      Dece.findOne({ user: id }),
    ]);
    
    const casos = Caso.find({dece})
    const casosIds = casos.map((caso) => { caso._id});
    console.log("Nada ",casos, " user", user, " dece",dece)


    const tests = await TestTeacher.aggregate([
   
      {
        $lookup: {
          from: "students",
          localField: "casoData.student",
          foreignField: "_id",
          as: "studentData",
        },
      },
      {
        $unwind: "$studentData",
      },
      {
        $lookup: {
          from: "people",
          localField: "studentData.person",
          foreignField: "_id",
          as: "personStudentData",
        },
      },
      {
        $unwind: "$personStudentData",
      },
      {
        $lookup: {
          from: "teachers",
          localField: "casoData.teacher",
          foreignField: "_id",
          as: "teacherData",
        },
      },
      {
        $unwind: "$teacherData",
      },
      {
        $lookup: {
          from: "users",
          localField: "teacherData.user",
          foreignField: "_id",
          as: "userTeacherData",
        },
      },
      {
        $unwind: "$userTeacherData",
      },
      {
        $lookup: {
          from: "people",
          localField: "userTeacherData.person",
          foreignField: "_id",
          as: "personTeacherData",
        },
      },
      {
        $unwind: "$personTeacherData",
      },
      {
        $project: {
          _id: 1, // Incluir el campo _id,
          caso: 1,
          scoreMax: 1, // Incluir el campo scoreMax
          score: 1, // Incluir el campo score
          diagnostic: 1, // Incluir el campo diagnostic
          status: 1, // Incluir el campo status
          createdAt: 1, // Incluir fechas de creacion
          "studentData.grade": 1, // Incluir el campo "grade" de "studentData"
          "studentData.parallel": 1, // Incluir el campo "parallel" de "studentData"
          "personStudentData.CI": 1, // Incluir el campo "CI" de "personStudentData"
          "personStudentData.name": 1, // Incluir el campo "name" de "personStudentData"
          "personStudentData.lastName": 1, // Incluir el campo "lastName" de "personStudentData"
          "personStudentData.age": 1, // Incluir el campo "age" de "personStudentData"
          "personStudentData.gender": 1, // Incluir el campo "gender" de "personStudentData"
          "personTeacherData.CI": 1, // Incluir el campo "CI" de "personTeacherData"
          "personTeacherData.name": 1, // Incluir el campo "name" de "personTeacherData"
          "personTeacherData.lastName": 1, // Incluir el campo "lastName" de "personTeacherData"
          "personTeacherData.email": 1, // Incluir el campo "email" de "personTeacherData"
        },
      },
    ]);
    console.log(tests);

    const listTests = await Promise.all(
      tests.map(async (test) => {
        const student = test.studentData[0];
        const personStudent = test.personStudentData[0];
        const personTeacher = test.personTeacherData[0];

        return {
          id: test._id,
          scoreMax: test.scoreMax,
          score: test.score,
          diagnostic: test.diagnostic,
          statusTestTeacher: test.status ? test.status : false,
          ciStudent: personStudent.CI,
          nameStudent: personStudent.name,
          lastNameStudent: personStudent.lastName,
          genderStudent: personStudent.gender,
          ageStudent: personStudent.age,
          gradeStudent: student.grade,
          parallelStudent: student.parallel,
          ciTeacher: personTeacher.CI,
          nameTeacher: personTeacher.name,
          lastNameTeacher: personTeacher.lastName,
          emailTeacher: personTeacher.email,
          createAt: test.createdAt,
        };
      })
    );

    res
      .status(200)
      .send({ message: "Datos obtenidos correctamente", data: listTests });
  } catch (error) {
    res.status(400).send({ error: error + "Error finding testTeacher" });
  }
};

exports.getTestTeacher = async (req, res) => {
  try {
    const test = await TestTeacher.findById(req.params.id);

    res.status(200).send(test);
  } catch (error) {
    res.status(400).send({ error: error + "Error finding testTeacher" });
  }
};

exports.deleteOne = async (req, res) => {
  try {
    const testTeacher = await TestTeacher.findByIdAndDelete(req.params.id);

    res.status(200).send({ message: "Test Teacher eliminado correctamente" });
  } catch (error) {
    console.log(error);
    res.status(400).send({ error: error + "Error deleting testTeacher" });
  }
};
